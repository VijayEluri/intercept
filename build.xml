<?xml version="1.0"?>
<project name="intercept" default="build" basedir=".">

    <property name="release.label" value="Dev"/>

    <property name="core.src.dir" location="core/src"/>
    <property name="core.test.dir" location="core/test"/>
    <property name="server.src.dir" location="server/src"/>
    <property name="server.test.dir" location="server/test"/>

    <property name="build.dir" location="build"/>
    <property name="dist.dir" value="${build.dir}/dist/intercept"/>

    <property name="jar.dir" location="${build.dir}/jar"/>
    <property name="manifest.file" value="${jar.dir}/MANIFEST.MF"/>

    <property name="test.reports.dir" location="${build.dir}/test-reports"/>
    <property name="reports.dir" location="${build.dir}/reports"/>
    <property name="instrumented.dir" value="${build.dir}/instrumented"/>

    <property name="findbugs.home" value="${basedir}/tools/findbugs-1.3.8"/>
    <property name="cobertura.dir" value="${basedir}/tools/cobertura-1.9.2"/>

    <path id="classpath">
        <fileset dir="lib">
            <include name="build/*.jar"/>
            <include name="release/*.jar"/>
        </fileset>
    </path>

    <path id="server.classpath">
        <fileset dir="server/lib">
            <include name="build/*.jar"/>
            <include name="release/*.jar"/>
        </fileset>
        <path location="${jar.dir}/intercept-core.jar"/>
        <path refid="classpath"/>
    </path>

    <path id="test.classpath">
        <fileset dir="${jar.dir}" includes="*.jar"/>
        <fileset dir="lib">
            <include name="test/*.jar"/>
        </fileset>
        <path refid="classpath"/>
    </path>

    <path id="server.test.classpath">
        <fileset dir="${jar.dir}" includes="*.jar"/>
        <fileset dir="server/lib">
            <include name="test/*.jar"/>
        </fileset>
        <path refid="test.classpath"/>
        <path refid="server.classpath"/>
    </path>


    <path id="antlr.classpath">
        <fileset dir="server/lib" includes="**/*.jar"/>
    </path>

    <path id="cobertura.class.path">
        <fileset dir="${cobertura.dir}">
            <include name="cobertura.jar"/>
            <include name="lib/**/*.jar"/>
            <include name="server/lib/**/*.jar"/>
        </fileset>
    </path>

    <taskdef classpathref="cobertura.class.path" resource="tasks.properties"/>

    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
        <classpath>
            <fileset dir="${findbugs.home}/lib" includes="*.jar"/>
        </classpath>
    </taskdef>

    <macrodef name="compile.source">
        <attribute name="src.dir"/>
        <attribute name="dest.dir"/>
        <attribute name="jar.name"/>
        <attribute name="manifest"/>
        <attribute name="classes.dir" default="@{dest.dir}/classes"/>
        <attribute name="classpathref" default="classpath"/>
        <attribute name="debug" default="yes"/>

        <sequential>
            <mkdir dir="@{dest.dir}"/>
            <mkdir dir="@{classes.dir}"/>
            <javac srcdir="@{src.dir}" destdir="@{classes.dir}" classpathref="@{classpathref}" debug="@{debug}"
                   target="1.5"/>
            <copy todir="@{classes.dir}" includeemptydirs="no">
                <fileset dir="@{src.dir}" excludes="**/*.java"/>
            </copy>
            <jar destfile="@{dest.dir}/@{jar.name}" basedir="@{classes.dir}">
                <manifest>
                    <attribute name="Main-Class" value="intercept.Console"/>
                </manifest>
            </jar>

            <delete dir="@{classes.dir}"/>
        </sequential>
    </macrodef>

    <macrodef name="unit.test">
        <attribute name="test.dir"/>
        <attribute name="test.classpath" default="test.classpath"/>
        <sequential>
            <mkdir dir="${test.reports.dir}"/>
            <junit fork="yes" forkmode="once" failureproperty="test.failure">
                <jvmarg value="-Xmx128M"/>
                <classpath>
                    <fileset dir="${instrumented.dir}" includes="*.jar"/>
                    <path refid="@{test.classpath}"/>
                    <path refid="cobertura.class.path"/>
                </classpath>

                <formatter type="brief" usefile="false" unless="ci-build"/>
                <formatter type="xml" if="ci-build"/>

                <sysproperty key="net.sourceforge.cobertura.datafile" file="${build.dir}/cobertura.ser"/>

                <batchtest todir="${test.reports.dir}" if="testcase">
                    <fileset dir="@{test.dir}">
                        <include name="**/${testcase}.java"/>
                    </fileset>
                </batchtest>
                <batchtest todir="${test.reports.dir}" unless="testcase">
                    <fileset dir="@{test.dir}">
                        <include name="**/*Tests.java"/>
                    </fileset>
                </batchtest>
            </junit>

            <fail message="Test(s) failed" if="test.failure"/>

            <echo message="Test(s) passed"/>

        </sequential>

    </macrodef>

    <target name="build" depends="clean, compile.core, compile.server,  test.core"
            description="Runs the full build"/>

    <target name="clean" description="Deletes all the build directories.">
        <delete dir="${build.dir}"/>
    </target>


    <target name="compile.core" description="Compiles the core source">
        <mkdir dir="${jar.dir}"/>
        <manifest file="${manifest.file}">
            <attribute name="Built-By" value="${user.name}"/>
            <section name="intercept">
                <attribute name="Specification-Title" value="${ant.project.name} web application"/>
                <attribute name="Specification-Version" value="${release.label}"/>
                <attribute name="Specification-Vendor" value="Graham Brooks"/>
                <attribute name="Implementation-Title" value="common"/>
                <attribute name="Implementation-Version" value="${release.label}"/>
                <attribute name="Implementation-Vendor" value="Graham Brooks"/>
            </section>
        </manifest>
        <compile.source src.dir="${core.src.dir}" dest.dir="${jar.dir}"
                        jar.name="intercept-core.jar" manifest="${manifest.file}"/>
        <compile.source src.dir="${core.test.dir}" dest.dir="${jar.dir}"
                        jar.name="intercept-core.test.jar" manifest="${manifest.file}"
                        classpathref="test.classpath"/>
    </target>

    <target name="compile.grammar">
        <antlr:ant-antlr3 xmlns:antlr="antlib:org/apache/tools/ant/antlr"
                          target="${server.src.dir}/intercept/configuration/Configuration.g"
                          outputdirectory="${server.src.dir}/intercept/configuration">
            <classpath refid="classpath"/>
        </antlr:ant-antlr3>
    </target>

    <target name="compile.server" description="Compiles the source" depends="compile.grammar, compile.core">
        <mkdir dir="${jar.dir}"/>
        <manifest file="${manifest.file}">
            <attribute name="Built-By" value="${user.name}"/>
            <section name="middleman">
                <attribute name="Specification-Title" value="${ant.project.name} web application"/>
                <attribute name="Specification-Version" value="${release.label}"/>
                <attribute name="Specification-Vendor" value="Graham Brooks"/>
                <attribute name="Implementation-Title" value="common"/>
                <attribute name="Implementation-Version" value="${release.label}"/>
                <attribute name="Implementation-Vendor" value="Graham Brooks"/>
            </section>
        </manifest>
        <compile.source src.dir="${server.src.dir}" dest.dir="${jar.dir}"
                        jar.name="intercept-sever.jar" manifest="${manifest.file}"
                        classpathref="server.classpath"/>
        <compile.source src.dir="${server.test.dir}" dest.dir="${jar.dir}"
                        jar.name="intercept-server-test.jar" manifest="${manifest.file}"
                        classpathref="server.test.classpath"/>
    </target>


    <target name="test.core" description="Runs unit tests" unless="notests">
        <mkdir dir="${instrumented.dir}"/>
        <unit.test test.dir="${core.test.dir}"/>
    </target>

    <target name="test.server" description="Runs the server tests" unless="notests" depends="compile.server">
        <mkdir dir="${instrumented.dir}"/>
        <unit.test test.dir="${server.test.dir}" test.classpath="server.test.classpath"/>
    </target>


    <target name="dist" description="Create a release distribution" depends="compile.core">
        <mkdir dir="${dist.dir}"/>
        <copy todir="${dist.dir}/lib">
            <fileset file="${jar.dir}/intercept-core.jar"/>
        </copy>
        <copy todir="${dist.dir}" file="README.md"/>
        <zip destfile="intercept.zip" comment="Intercept distribution">
            <fileset dir="${build.dir}/dist" includes="**/*"/>
        </zip>
    </target>

    <target name="instrument" depends="compile.core">
        <mkdir dir="${instrumented.dir}"/>
        <cobertura-instrument todir="${instrumented.dir}" datafile="${build.dir}/cobertura.ser">
            <fileset dir="${jar.dir}">
                <include name="intercept-core.jar"/>
            </fileset>
        </cobertura-instrument>
    </target>

    <target name="coverage.core" depends="instrument, test.core">
        <cobertura-report format="html" destdir="${reports.dir}/html/cobertura"
                          datafile="${build.dir}/cobertura.ser">
            <fileset dir="${core.src.dir}">
                <include name="**/*.java"/>
            </fileset>
        </cobertura-report>
        <cobertura-report format="xml" destdir="${reports.dir}/xml/cobertura"
                          datafile="${build.dir}/cobertura.ser">
            <fileset dir="${core.src.dir}">
                <include name="**/*.java"/>
            </fileset>
        </cobertura-report>
    </target>

    <target name="findbugs" depends="compile.core">
        <mkdir dir="${reports.dir}/xml"/>
        <findbugs home="${findbugs.home}"
                  failOnError="true"
                  output="xml"
                  outputFile="${reports.dir}/xml/findbugs.xml">
            <auxClasspath>
                <path refid="test.classpath"/>
            </auxClasspath>
            <sourcePath path="${core.src.dir}"/>
            <class location="${jar.dir}/intercept-core.jar"/>
        </findbugs>
    </target>

    <target name="ci-property-setup">
        <property name="ci-build" value="true"/>
        <echo message="ci-build property is ${ci-build}"/>
    </target>

    <target name="ci" depends="clean, ci-property-setup, coverage.core, findbugs, dist">
    </target>

</project>
